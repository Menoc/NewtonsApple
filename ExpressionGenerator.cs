// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------
using System.Collections.Generic;
using System;
using NTuple;
namespace ExpressionGenerator
{
	public class ExpressionGenerator
	{
		private class Random1
		{
			public static int Range(int a,int b)
			{
				var r = new System.Random ((int)System.DateTime.Now.Ticks);
				return r.Next () % (b - a) + a;
			}
		}
		public ExpressionGenerator ()
		{
		}
		private static List<int> divisors(int number)
		{
			var lst = new List<int>();
			for (int i = 2; i<=(int)Math.Sqrt(number); i++) {
				if(number%i==0){
					lst.Add(i);
				}
			}
			return lst;
		}
		public static NTuple.Tuple<int,int> makeAddExpressionThatEquals(int number)
		{
			int a = Random1.Range (1, number);
			return new Tuple<int,int>(a,number-a);
		}
		private static bool isPrime(int number)
		{
			for (int i = 2; i <= (int)Math.Sqrt (number); i++) {
				if (number % i == 0)
					return false;
			}
			
			return true;
		}
		public static Tuple<int,int> makeMulExpressionThatEquals(int number)
		{
			if (isPrime (number)) {
				return new Tuple<int,int> (1, number);
			}
			var lst = divisors (number);
			int size = lst.Count;
			int i = Random1.Range (0, size);
			return new Tuple<int,int> (lst [i], number / (lst[i]));
		}
		public static Tuple<int,int,int> makeAddMulExpressionThatEquals(int number)
		{
			int r = Random1.Range (number / 2, number);
			if (isPrime (r)) {
				r++;
			}
			var p = makeMulExpressionThatEquals (r);
			int b = p.Item1;
			int c = p.Item2;
			return new Tuple<int,int,int> (number - b * c, b, c);
		}
		public static Tuple<int,int,int> MakeAddAddExpressionThatEquals(int number)
		{
			int r = Random1.Range (number/2, number / 2 + number / 3);
			var p = makeAddExpressionThatEquals (r);

			return new Tuple<int,int,int>(number-r,p.Item1,p.Item2);
		}
	}
}

